/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FormSubmissionService } from "../formSubmission.service";
import { FormSubmissionCreateInput } from "./FormSubmissionCreateInput";
import { FormSubmission } from "./FormSubmission";
import { FormSubmissionFindManyArgs } from "./FormSubmissionFindManyArgs";
import { FormSubmissionWhereUniqueInput } from "./FormSubmissionWhereUniqueInput";
import { FormSubmissionUpdateInput } from "./FormSubmissionUpdateInput";

export class FormSubmissionControllerBase {
  constructor(protected readonly service: FormSubmissionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FormSubmission })
  async createFormSubmission(
    @common.Body() data: FormSubmissionCreateInput
  ): Promise<FormSubmission> {
    return await this.service.createFormSubmission({
      data: data,
      select: {
        createdAt: true,
        id: true,
        submissionData: true,
        updatedAt: true,
        userEmail: true,
        userName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FormSubmission] })
  @ApiNestedQuery(FormSubmissionFindManyArgs)
  async formSubmissions(
    @common.Req() request: Request
  ): Promise<FormSubmission[]> {
    const args = plainToClass(FormSubmissionFindManyArgs, request.query);
    return this.service.formSubmissions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        submissionData: true,
        updatedAt: true,
        userEmail: true,
        userName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FormSubmission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async formSubmission(
    @common.Param() params: FormSubmissionWhereUniqueInput
  ): Promise<FormSubmission | null> {
    const result = await this.service.formSubmission({
      where: params,
      select: {
        createdAt: true,
        id: true,
        submissionData: true,
        updatedAt: true,
        userEmail: true,
        userName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FormSubmission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFormSubmission(
    @common.Param() params: FormSubmissionWhereUniqueInput,
    @common.Body() data: FormSubmissionUpdateInput
  ): Promise<FormSubmission | null> {
    try {
      return await this.service.updateFormSubmission({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          submissionData: true,
          updatedAt: true,
          userEmail: true,
          userName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FormSubmission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFormSubmission(
    @common.Param() params: FormSubmissionWhereUniqueInput
  ): Promise<FormSubmission | null> {
    try {
      return await this.service.deleteFormSubmission({
        where: params,
        select: {
          createdAt: true,
          id: true,
          submissionData: true,
          updatedAt: true,
          userEmail: true,
          userName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
