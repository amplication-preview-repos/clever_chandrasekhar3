/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FormSubmission } from "./FormSubmission";
import { FormSubmissionCountArgs } from "./FormSubmissionCountArgs";
import { FormSubmissionFindManyArgs } from "./FormSubmissionFindManyArgs";
import { FormSubmissionFindUniqueArgs } from "./FormSubmissionFindUniqueArgs";
import { CreateFormSubmissionArgs } from "./CreateFormSubmissionArgs";
import { UpdateFormSubmissionArgs } from "./UpdateFormSubmissionArgs";
import { DeleteFormSubmissionArgs } from "./DeleteFormSubmissionArgs";
import { FormSubmissionService } from "../formSubmission.service";
@graphql.Resolver(() => FormSubmission)
export class FormSubmissionResolverBase {
  constructor(protected readonly service: FormSubmissionService) {}

  async _formSubmissionsMeta(
    @graphql.Args() args: FormSubmissionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FormSubmission])
  async formSubmissions(
    @graphql.Args() args: FormSubmissionFindManyArgs
  ): Promise<FormSubmission[]> {
    return this.service.formSubmissions(args);
  }

  @graphql.Query(() => FormSubmission, { nullable: true })
  async formSubmission(
    @graphql.Args() args: FormSubmissionFindUniqueArgs
  ): Promise<FormSubmission | null> {
    const result = await this.service.formSubmission(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FormSubmission)
  async createFormSubmission(
    @graphql.Args() args: CreateFormSubmissionArgs
  ): Promise<FormSubmission> {
    return await this.service.createFormSubmission({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FormSubmission)
  async updateFormSubmission(
    @graphql.Args() args: UpdateFormSubmissionArgs
  ): Promise<FormSubmission | null> {
    try {
      return await this.service.updateFormSubmission({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FormSubmission)
  async deleteFormSubmission(
    @graphql.Args() args: DeleteFormSubmissionArgs
  ): Promise<FormSubmission | null> {
    try {
      return await this.service.deleteFormSubmission(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
